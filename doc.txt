cd exercise
jest folder --watch



1. reverse string

debugging:
 - use 'debugger' in code
 - manually call function
 - run node inspect index.js
 - 'c' to continue, 'repl' to read variables


2. palindrome

3. reverse int

4. max chars:
  - we need to split string into objects where key is character and value is number of occurence
  hello ->
  {
    'h' : 1,
    'e' : 1,
    'l' : 2,
    'o' : 1
  }

  - then we need to compare all characters' values and return max
    we loop through obj and assign max and maxChar if value is greater than previous


5. fizzbuzz

6. chunk

7. anagrams
first solution is bad as we loop several times

8. capitalize

9. steps

10. pyramids

11. vowels

12. spiral matrix

13. fibonacci : as in recursive situation time complexity where slow, we can improve by memoization:

in recursive solution we call same function again and again, how to fix:
slow fib -> memoize -> fast fib

14. data structures - queue

  weave: compine two queues into one

15. stack data - struct

16. queue of two stacks:


17. Linked list:

node , can be head and tail
tail node always points to null
node consist of data and next (reference to next node)


as we added insertAt, getAt, removeAt methods - we can easily replace specific methods such as removeFirst and etc.


18. midpoint

Solution: is to create two pointing nodes: slow, fast. on each iteration we should check fast node and its two consecuitive nodes.

19. circular

Problem when some node's next pointer points to previous node causing infinite loop


20. from last

find node from n to last


21. trees:

traverse BF - iterate through tree and implement function as param
traverse DF - iterate from top to bottom and implement function

22. level width, when we see word "width" we should consider using BF solution

Level width is the array of numbers, each number saying amount of nodes on each level 

Solution idea is to iterate through tree BF and add additional character to count nodes on each level


23. binary search tree:
node has only two children left and right
left child less than parent, right more than parent

 - insert
 - contains

 24 validate bst: function which says whether tree is bst or not



 Sorting algo:
  - bubblesort
  - selectionsort
  - mergesort